@startuml
class Socket {
    + Socket()
    + bool setAddress (const char* address, const int port)
    + bool connect()
    + void close()
    + void shutdown()
    + bool createUDP()
    + void setUp(int socketHandle, struct sockaddr *hostAddress)
    + int getSocketHandle()
    + IOCompnent* getIOComponet()
    + void setIOComponet(IOComponent *ioc)
    + int write(const void *data, int len)
    + int read(void *data, int len)
    + bool setKeepAlive(bool on)
    + bool setSoLinger(bool doLinger, int seconds)
    + bool setTcpNoDelay(bool noDelay)
    + bool setIntOption(int option, int value)
    + bool setTimeOption(int option, int miliseconds);
    + bool setSoBlocking(bool on)
    + bool checkSocketHandle()
    + int getSoError()
    + std::string getAddr()
    + uint64_t getId()
    + uint64_t getPeerId()
    + int getLocalPort()
    + {static} int getLastError()
    # struct sockaddr_in _address
    # int _socketHandle
    # IOComponent *_iocomponent
    # {static} tbsys::CthreadMutex _dnsMutex
}

class IOEvent {
    + bool _readOccurred
    + bool _writeOccurred
    + bool _errorOccurred
    + IOComponent *_ioc
}

class SocketEvent {
    + {abstract}  bool addEvent(Socket *socket, bool enableRead, bool enableWrite)
    + {abstract}  bool setEvent(Socket *socket, bool enableRead, bool enableWrite)
    + {abstract}  bool removeEvent(Socket *socket)
    + {abstract}  int getEvents(int timeout, IOEvent *events, int cnt)
}

class EPollSocketEvent {
    + EPollSocketEvent()
    + bool addEvent(Socket *socket, bool enableRead, bool enableWrite)
    + bool setEvent(Socket *socket, bool enableRead, bool enableWrite)
    + bool removeEvent(Socket *socket)
    + int getEvents(int timeout, IOEvent *events, int cnt)
    - int _iepfd
}

SocketEvent <|-- EPollSocketEvent


IOComponent ..> Transport
class IOComponent {
    + enum TBSTSUS
    + IOComponent(Transport *owner, Socket *socket);
    + {abstract} bool int(bool isServer = false)
    + {abstract} void close()
    + {abstract} bool handleWriteEvent()
    + {abstract} bool handleReadEvent()
    + {abstract} void checkTimeout(int64_t now)
    + Socket *getSocket()
    + void setSocketEvent(SocketEvent* socketEvent)
    + void enableWrite(bool writeOn)
    + add Ref()
    + void subRef()
    + int getRef()
    + bool isCOnnectState()
    + int getState()
    + void setAutoReconn(bool on)
    + bool isAutoReconn()
    + bool isUsed()
    + void setUsed(bool b)
    + int64_t getLastUseTime()
    + Transport *getOwner()
    # Transport *_owner
    # Socket *_socket
    # SocektEvent *_socketEvent
    # int _state;
    # atomic_t _refcount
    # bool _autoReconn
    # bool _isServer
    # bool _inUsed
    # int64_t _lastUseTime
    - IOComponent *_prev
    - IOComponent *_next
}

IOComponent <|-- TCPComponent
IOComponent o--> TCPConection
class TCPComponent {
    + TCPComponent(Transport* owner, Socket* socket, IPacketStreamer* streamer, IServerAdapter* serverAddapter)
    + bool init(Bool isServer)
    + void close()
    + bool handleWriteEvent()
    + bool handleReadEvent()
    + TCPConnection* getConnection()
    + void checkTimeout(int64_t nwo)
    + bool socketConect()
    - TCPConnection* _connection
    - int64_t _startConnectTime
}

TCPConnection <|-- connection
TCPConnection *-->DataBuffer
TCPConnection *-->PacketHeader
class TCPConnection {
    + TCPConnection(Socket *socket, IPacketStreamer *streamer, IServerAdapter *serverAdapter)
    + ~TCPConnection()
    + bool writeData()
    + bool readData()
    + void setWriteFinishClose(bool v)
    + void clearOutputBuffer()
    + void clearInputBuffer()
    + void setDisconnState()

	- DataBuffer _output
	- DataBuffer _input
	- PacketHeader _packetHeader
	- bool _gotHeader
	- bool _writeFinishClose;

}

connection *--> IPacketHandler
connection *--> IOComponent
connection *--> Socket
connection *--> IPacketStreamer
connection *--> IServerAdapter
connection o--> PacketQueue
connection o--> ChannelPool
class connection {
    + Connection(Socket *socket, IPacketStreamer *streamer, IServerAdapter *serverAdapter)
    + {abstract} ~Connection()
    + void setServer(bool isServer)
    + void setIOComponent(IOComponent *ioc)
    + IOComponent *getIOComponent()
    + void setDefaultPacketHandler(IPacketHandler *ph)
    + bool postPacket(Packet *packet, IPacketHandler *packetHandler = NULL, void *args = NULL, bool noblocking = true)
    + bool handlePacket(DataBuffer *input, PacketHeader *header)
    + bool checkTimeout(int64_t now)
    + {abstract} bool writeData()
    + {abstract} bool readData()
    + {abstract} void setWriteFinishClose(bool v)
    + void setQueueTimeout(int queueTimeout)
    + {abstract} void clearOutputBuffer()
    + void setQueueLimit(int limit)
    + bool isConnectState()
    + uint64_t getServerId()
    + uint64_t getPeerId()
    + int getLocalPort()
    + int getInputQueueLength()
    + int getOutputQueueLength()
    # void disconnect()

	# IPacketHandler *_defaultPacketHandler
    # bool _isServer
    # IOComponent *_iocomponent
    # Socket *_socket
    # IPacketStreamer *_streamer
    # IServerAdapter *_serverAdapter
    # PacketQueue _outputQueue
    # PacketQueue _inputQueue
    # PacketQueue _myQueue
    # tbsys::CThreadCond _outputCond
    # ChannelPool _channelPool
    # int _queueTimeout
    # int _queueTotalSize
    # int _queueLimit
}

@enduml


